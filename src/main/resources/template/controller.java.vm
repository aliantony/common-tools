package ${package.Controller};

import lombok.extern.slf4j.Slf4j;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.bind.annotation.RequestMethod;
import io.swagger.annotations.*;
import com.antiy.common.base.ActionResponse;
import javax.annotation.Resource;
import com.antiy.common.base.QueryCondition;
import com.antiy.common.utils.ParamterExceptionUtils;

import ${package.Service}.${table.serviceName};
import ${package.Entity}.${entity};
import ${package.Entity}.vo.request.${entity}Request;
import ${package.Entity}.vo.response.${entity}Response;
import ${package.Entity}.vo.query.${entity}Query;

#macro(getTableCamelName $entityName)
#if(${package.ModuleName} && ${entity.contains(${package.ModuleName})})
    #set($simpleEntity = $entityName.substring(${package.ModuleName.length()}).toLowerCase())
#else#set($simpleEntity = ${entity})#end
${simpleEntity.toLowerCase()}##
#end

/**
 *
 * @author ${author}
 * @since ${date}
 */
@Api(value = "${entity}", description = "${table.comment}")
@RestController
@RequestMapping("/v1#if(${package.ModuleName})/${package.ModuleName}#end/#if(${controllerMappingHyphenStyle})${controllerMappingHyphen}#else#getTableCamelName(${entity})#end")
@Slf4j
#if(${superControllerClass})
public class ${table.controllerName} extends ${superControllerClass} {
#else
public class ${table.controllerName} {
#end

    @Resource
    public ${table.serviceName} i${entity}Service;

    /**
     * 保存
     * @param ${table.entityPath}
     * @return actionResponse
     */
    @ApiOperation(value = "保存接口", notes = "传入实体对象信息")
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "OK", response = ActionResponse.class, responseContainer = "actionResponse"),
    })
    @RequestMapping(value = "/save/single", method = RequestMethod.POST)
    public ActionResponse saveSingle(@RequestBody @ApiParam(value = "${table.entityPath}")${entity}Request ${table.entityPath})throws Exception{
        i${entity}Service.save${entity}(${table.entityPath});
        return ActionResponse.success();
    }

    /**
     * 修改
     * @param ${table.entityPath}
     * @return actionResponse
     */
    @ApiOperation(value = "修改接口", notes = "传入实体对象信息")
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "OK", response = ActionResponse.class, responseContainer = "actionResponse"),
    })
    @RequestMapping(value = "/update/single", method = RequestMethod.PUT)
    public ActionResponse updateSingle(@RequestBody @ApiParam(value = "${table.entityPath}")${entity}Request ${table.entityPath})throws Exception{
        i${entity}Service.update${entity}(${table.entityPath});
        return ActionResponse.success();
    }

    /**
     * 批量查询
     * @param ${table.entityPath}
     * @return actionResponse
     */
    @ApiOperation(value = "批量查询接口", notes = "传入查询条件")
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "OK", response = ActionResponse.class, responseContainer = "actionResponse"),
    })
    @RequestMapping(value = "/query/list", method = RequestMethod.GET)
    public ActionResponse queryList(@RequestBody @ApiParam(value = "${table.entityPath}") ${entity}Query ${table.entityPath})throws Exception{
        return ActionResponse.success(i${entity}Service.findPage${entity}(${table.entityPath}));
    }

    /**
     * 通过ID查询
     * @param query 主键封装对象
     * @return actionResponse
     */
    @ApiOperation(value = "通过ID查询", notes = "主键封装对象")
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "OK", response = ActionResponse.class, responseContainer = "actionResponse"),
    })
    @RequestMapping(value = "/query/id", method = RequestMethod.GET)
    public ActionResponse queryById(@RequestBody @ApiParam(value = "${table.entityPath}") QueryCondition query)throws Exception{
        ParamterExceptionUtils.isBlank(query.getPrimaryKey(), "ID不能为空");
        return ActionResponse.success(i${entity}Service.getById(query.getPrimaryKey()));
    }

    /**
     * 通过ID删除
     * @param query 主键封装对象
     * @return actionResponse
     */
    @ApiOperation(value = "通过ID删除接口", notes = "主键封装对象")
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "OK", response = ActionResponse.class, responseContainer = "actionResponse"),
    })
    @RequestMapping(value = "/delete/id", method = RequestMethod.DELETE)
    public ActionResponse deleteById(@RequestBody @ApiParam(value = "query") QueryCondition query)throws Exception{
        ParamterExceptionUtils.isBlank(query.getPrimaryKey(), "ID不能为空");
        return ActionResponse.success(i${entity}Service.deleteById(query.getPrimaryKey()));
    }
}

